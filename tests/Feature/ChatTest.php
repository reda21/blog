<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Chat;
use Musonza\Chat\Models\Conversation;
use Musonza\Chat\Models\Message;
use Musonza\Chat\Models\MessageNotification;
use Musonza\Chat\Models\Participation;
use Tests\TestCase;
use Tests\UserTrait;
use Artisan;

class ChatTest extends TestCase
{
    use UserTrait;

    //   use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Artisan::call("config:clear");

        Artisan::call("migrate");
    }

    private function CreatPrivateConversation(User $sender, User $receiver, $message)
    {
        $chat = app(Chat::class);
        $participants = [$sender, $receiver];

        $conversation = Chat::createConversation($participants);

        Chat::message($message)
            ->from($sender)
            ->to($conversation)
            ->send();

        return $conversation;


        $data = ['title' => 'PHP Channel', 'type' => 'Private', "sender-id" => $sender->id];
        $conversation->update(['data' => $data]);


        return $conversation;
    }

    public function testShowAllConversations()
    {
        $me = $this->UserRedac();
        $header = $this->SetToken($me);
        $user = $this->createUser();

        $this->CreatPrivateConversation($me, $user, "message private");

        $response = $this->json("GET", "api/chat", [], $header);

        $response->dump();
        $response->assertSuccessful();

        $data = $response->json();
        $this->assertEquals(count($data), 1);
    }

    public function testCreatePrivateConversationWithTrue()
    {
        $me = $this->UserRedac();
        $this->apiAuth($me, ["readMessage"]);
        $user = $this->createUser();


        $response = $this->json("POST", "api/chat", [
            "user" => $user->id,
            "message" => "message texte",
        ]);


        $response2 = $this->json("GET", "api/chat");


        dd($response2->json());


        $response->assertSuccessful();

        $this->assertEquals(Conversation::count(), 1);

        $this->assertEquals(Message::count(), 1);

        $this->assertEquals(MessageNotification::count(), 2);
    }

    public function testLoadConversation()
    {
        $me = $this->UserRedac();
        $this->apiAuth($me, ["readMessage"]);
        $user = $this->createUser();

        $conversation = Chat::createConversation([$me, $user]);

        $response = $this->json("GET", "api/chat/" . $conversation->id);

        $response->dump();

        self::assertEquals(1 + 0, 1);

    }

    public function testSendConversation()
    {
        $me = $this->UserRedac();
        $this->apiAuth($me, ["readMessage"]);
        $user = $this->createUser();

        $conversation = Chat::createConversation([$me, $user]);

        $response = $this->json("POST", "api/chat/" . $conversation->id, [
            "body" => "new message"
        ]);

        $response->dump();

        self::assertEquals(1 + 3, 4);
    }

    public function testWindow()
    {
        $me = $this->UserRedac();
        $this->apiAuth($me, ["readMessage"]);

        $user = $this->createUser();

        $conversation = Chat::createConversation([$me, $user]);

        Chat::message('Hello there 0')->from($me)->to($conversation)->send();
        Chat::message('Hello there 1')->from($user)->to($conversation)->send();
        Chat::message('Hello there 2')->from($user)->to($conversation)->send();

        Chat::message('Hello there 3')->from($me)->to($conversation)->send();
        Chat::message('Hello there 4')->from($me)->to($conversation)->send();
        Chat::message('Hello there 5')->from($me)->to($conversation)->send();

        dd($conversation->getNotifications($user)->where("is_seen", 1)->count());

    }
}
