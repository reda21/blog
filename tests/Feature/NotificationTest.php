<?php


namespace Tests\Feature;

use App\Models\Post;
use App\Models\User;
use App\Notifications\NotificationFollowersUser;
use App\Notifications\NotificationPost;
use Artisan;
use Tests\TestCase;
use Tests\UserTrait;


class NotificationTest extends TestCase
{
    use UserTrait;

    //   use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Artisan::call("config:clear");

        Artisan::call("migrate");
    }

    public function testNotifWithTrue()
    {
        $user = $this->SimpleUser();
        $other = $this->SimpleUser();
        $three = $this->SimpleUser();
        $header = $this->SetToken($user);
        $user->notify(new NotificationFollowersUser($other));
        $user->notify(new NotificationFollowersUser($three));
        $response = $this->json("GET", "api/notifications", [], $header);

        self::assertTrue(true);
    }

    public function testNotifPost()
    {
        $user = $this->SimpleUser();
        $header = $this->SetToken($user);
        $other = $this->SimpleUser();
        $post = factory(Post::class)->create([
            "user_id" => $other->id
        ]);
        $user->notify(new NotificationPost($other, $post));

        $response = $this->json("GET", "api/notifications", [], $header);

        $response->assertSuccessful();

        $this->assertEquals($user->notifications()->count(), 1);
    }

    public function testDeleteNotificationAsTrue()
    {
        $this->createRole();
        $user = $this->createUser(1, "admin");
        $this->apiAuth($user);

        $user2 = $this->createUser();

        $user->notify(new NotificationFollowersUser($user2));

        $response = $this->json("get", "api/notifications");

        $response->assertSuccessful();

        $data = $response->json();

        $user = User::first();

        $this->assertEquals($user->notifications()->count(), 1);


        $id = $data["data"][0]["id"];

        $response = $this->json("delete", "api/notifications/".$id);

        $user = User::first();

        $this->assertEquals($user->notifications()->count(), 0);

    }

    public function testDeleteNotificationAsNotExisteElement()
    {
        $this->createRole();
        $user = $this->createUser(1, "admin");
        $this->apiAuth($user);
        $this->assertEquals($user->notifications()->count(), 0);
        $id = 1365;
        $response = $this->json("delete", "api/notifications/".$id);
        $response->assertStatus(422);
    }

    public function testDeleteAllNotificationsAsTrue()
    {
        $this->createRole();
        $user = $this->createUser(1, "admin");
        $this->apiAuth($user);

        $user2 = $this->createUser();

        $user->notify(new NotificationFollowersUser($user2));
        $user->notify(new NotificationFollowersUser($user2));
        $user->notify(new NotificationFollowersUser($user2));
        $user2->notify(new NotificationFollowersUser($user));
        $response = $this->json("get", "api/notifications");

        $response->assertSuccessful();

        $data = $response->content();

        $user = User::first();

        $this->assertEquals($user->notifications()->count(), 3);


        $response = $this->json("delete", "api/notifications");

        //     $response->dump();

        $user = User::first();

        $this->assertEquals($user->notifications()->count(), 0);
        $user2 = User::find(2);

        $this->assertEquals($user2->notifications()->count(), 1);

    }


}
