<?php

namespace Tests\Feature;

use Artisan;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use Tests\UserTrait;

class FriendsTest extends TestCase
{
    use UserTrait;

    //   use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        Artisan::call("config:clear");

        Artisan::call("migrate");
    }

    public function testFriendSendRequestWithTrue()
    {
        $me = $this->SimpleUser();
        $user = $this->SimpleUser();

        $header = $this->SetToken($me);

        self::assertFalse($me->isFollowing($user));

        $response = $this->json("post", "api/user/{$user->username}/follow", [], $header); //http://blog.me/api/user/redmax/follow

        $response->dump();

        $response->assertSuccessful();

        self::assertTrue($me->isFollowing($user));
    }

    public function testFriendSendRequestWithUserNotFound()
    {
        $me = $this->SimpleUser();
        $user = $this->SimpleUser();

        $header = $this->SetToken($me);

        self::assertFalse($me->isFollowing($user));

        $response = $this->json("post", "api/user/red/follow", [], $header); //http://blog.me/api/user/redmax/follow


        $response->assertStatus(404);

        self::assertFalse($me->isFollowing($user));
    }

    public function testFriendSendRequestWithDeuxFois()
    {
        $me = $this->SimpleUser();
        $user = $this->SimpleUser();

        $header = $this->SetToken($me);

        $me->follows($user);

        // self::assertTrue($me->isFollowing($user));

        $response = $this->json("post", "api/user/{$user->username}/follow", [], $header); //http://blog.me/api/user/redmax/follow

        $response->assertSuccessful();

        self::assertTrue($me->isFollowing($user));

    }

    public function testFriendSendRequestWithUnfolow()
    {
        $me = $this->SimpleUser();
        $user = $this->SimpleUser();

        $header = $this->SetToken($me);

        $me->follows($user);

        // self::assertTrue($me->isFollowing($user));

        $response = $this->json("post", "api/user/{$user->username}/unfollow", [], $header); //http://blog.me/api/user/redmax/follow

        $response->assertSuccessful();

        self::assertFalse($me->isFollowing($user));

    }

    public function testFriendSendRequestWithConfirmation()
    {
        $me = $this->SimpleUser();
        $user = $this->SimpleUser();

        $user->config->private_compte = true;
        $user->config->save();

        $header = $this->SetToken($me);
        self::assertFalse($me->isFollowing($user));

        $response = $this->json("post", "api/user/{$user->username}/unfollow", [], $header); //http://blog.me/api/user/redmax/follow

        self::assertFalse($me->isFollowing($user));

        self::assertTrue($me->followRequest($user));
    }
}
